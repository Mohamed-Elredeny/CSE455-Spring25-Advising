from sqlalchemy.orm import Session
from app.models.Requirement import Requirement
from app.models.course import Course
from app.models.academic_plan import AcademicPlan as AcademicPlanModel
from app.models.semester import Semester
from fastapi import HTTPException

def generate_plan(db: Session, program: str, preferences: dict = None):
    # Step 1: Get requirement for the program
    requirement = db.query(Requirement).filter(Requirement.program == program).first()
    if not requirement:
        raise HTTPException(status_code=404, detail=f"No requirements found for program: {program}")

    # Default preferences if not provided
    if preferences is None:
        preferences = {"max_credits_per_semester": 18, "total_credits": requirement.total_hours}

    completed_courses = set()  # Replace with actual query if needed

    # Step 2: Fetch all available courses for the program
    all_courses = db.query(Course).filter(Course.department == program).all()

    # Separate core and elective courses
    core_courses = [c for c in all_courses if c.is_core and c.course_id not in completed_courses]
    elective_courses = [c for c in all_courses if not c.is_core and c.course_id not in completed_courses]

    # Select enough core and elective courses to meet the requirement
    selected_core = core_courses[:requirement.num_core_courses]
    selected_elective = elective_courses[:requirement.num_elective_courses]

    # Combine and shuffle or order as needed
    selected_courses = selected_core + selected_elective

    # Step 3: Distribute courses across semesters
    semesters = []
    semester_credits = 0
    semester_courses = []
    total_credits = 0

    for course in selected_courses:
        # Check prerequisites
        if not all(prerequisite in completed_courses for prerequisite in getattr(course, "prerequisites", [])):
            continue

        # Add course to the current semester
        semester_courses.append(course)
        semester_credits += course.credits
        total_credits += course.credits
        completed_courses.add(course.course_id)

        # Finalize semester if credit limit is reached
        if semester_credits >= preferences.get("max_credits_per_semester", 18):
            semesters.append({"name": f"Semester {len(semesters) + 1}", "courses": semester_courses})
            semester_credits = 0
            semester_courses = []

        # Stop if total credits are satisfied
        if total_credits >= requirement.total_hours:
            break

    # Add the last semester if it has any courses
    if semester_courses:
        semesters.append({"name": f"Semester {len(semesters) + 1}", "courses": semester_courses})

    # Step 4: Create the academic plan in the database
    db_academic_plan = AcademicPlanModel(
        university="AutoGenerated University",
        department=program,
        program=program
    )
    db.add(db_academic_plan)
    db.commit()
    db.refresh(db_academic_plan)

    # Add semesters and courses to the database
    for semester in semesters:
        db_semester = Semester(name=semester["name"], academic_plan_id=db_academic_plan.id)
        db.add(db_semester)
        db.commit()
        db.refresh(db_semester)

        for course in semester["courses"]:
            course.semester_id = db_semester.id
            db.commit()

    return db_academic_plan